# -*- coding: utf-8 -*-
"""RegressionPractise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VPW44iVv1f3rH-xeELV5IcFpHBn9sMIA
"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Sample Data (Study Hours vs Exam Score)
X = [[1], [2], [3], [4], [5]]  # Study hours
y = [20, 40, 60, 80, 100]      # Exam scores

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

print("X_train" , X_train)

# Model training
model = LinearRegression()
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_test)

y_pred

# Evaluate model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

# Coefficients
print("Slope:", model.coef_)
print("Intercept:", model.intercept_)

from sklearn.metrics import mean_absolute_error

mae = mean_absolute_error(y_test, y_pred)
print(f"Mean Absolute Error: {mae:.2f}")

import matplotlib.pyplot as plt

# Plot actual points
plt.scatter(X, y, color='blue', label='Actual Data')

# Plot the regression line
X_range = [[i] for i in range(1, 6)]
y_range_pred = model.predict(X_range)
plt.plot(X_range, y_range_pred, color='red', label='Regression Line')

# Labels and title
plt.title("Study Hours vs Exam Score")
plt.xlabel("Study Hours")
plt.ylabel("Exam Score")
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

# Data
X = np.array([[1], [2], [3], [4], [5]])  # Years of experience
y = np.array([30000, 35000, 40000, 45000, 50000])  # Salary

# Model
model = LinearRegression()
model.fit(X, y)

# Predictions for plotting
X_range = np.linspace(1, 6, 100).reshape(-1, 1)
y_pred = model.predict(X_range)

# Plot
plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X_range, y_pred, color='red', label='Regression Line')
plt.title('Simple Linear Regression')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.legend()
plt.show()

X_range = np.linspace(1, 6, 10)

print("Shape before reshape:", X_range.shape)  # (10,)

X_range = X_range.reshape(-1, 1)

print("Shape after reshape:", X_range.shape)  # (10, 1)

#Multiple Linear Regression

import numpy as np

# Data
X = np.array([[1000, 3, 8], [1500, 4, 7], [2000, 5, 9]])  # Area, Bedrooms, Location Score
y = np.array([300000, 400000, 500000])  # Price

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

y_train

# Model
model = LinearRegression()
model.fit(X, y)

# Prediction
new_house = np.array([[1800, 4, 8]])
predicted_price = model.predict(new_house)
print(f"Predicted Price: ${predicted_price[0]:.2f}")

# Prediction
y_pred = model.predict(X_test)

y_pred

from mpl_toolkits.mplot3d import Axes3D

# Data
X = np.array([[1000, 3], [1500, 4], [2000, 5], [2500, 4], [3000, 5]])  # Area and Bedrooms
y = np.array([300000, 400000, 500000, 600000, 700000])  # Price

# Model
model = LinearRegression()
model.fit(X, y)

# Plotting
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Scatter Plot
ax.scatter(X[:, 0], X[:, 1], y, color='blue', label='Actual Data')

# Predicted surface
area_range = np.linspace(1000, 3000, 10)
bedrooms_range = np.linspace(3, 5, 10)
area_grid, bedroom_grid = np.meshgrid(area_range, bedrooms_range)
X_pred = np.column_stack((area_grid.ravel(), bedroom_grid.ravel()))
y_pred = model.predict(X_pred).reshape(area_grid.shape)

# Surface Plot
ax.plot_surface(area_grid, bedroom_grid, y_pred, color='red', alpha=0.5)

# Labels
ax.set_title("Multiple Linear Regression (3D)")
ax.set_xlabel("Area")
ax.set_ylabel("Bedrooms")
ax.set_zlabel("Price")
plt.legend()
plt.show()



# Polynomial Regression

from sklearn.preprocessing import PolynomialFeatures

# Data
X = np.array([[1], [2], [3], [4], [5]])
y = np.array([2, 6, 14, 28, 45])  # Non-linear relationship

# Polynomial Features
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)

# Model
model = LinearRegression()
model.fit(X_poly, y)

# Prediction
x_new = np.array([[5]])
x_new_poly = poly.transform(x_new)
predicted_value = model.predict(x_new_poly)
print(f"Predicted Value: {predicted_value[0]:.2f}")

from sklearn.preprocessing import PolynomialFeatures

# Data
X = np.array([[1], [2], [3], [4], [5]])
y = np.array([2, 6, 14, 28, 45])

# Polynomial Features
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)

# Model
model = LinearRegression()
model.fit(X_poly, y)

# Prediction
X_range = np.linspace(1, 5, 100).reshape(-1, 1)
X_range_poly = poly.transform(X_range)
y_pred = model.predict(X_range_poly)

# Plot
plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X_range, y_pred, color='red', label='Polynomial Curve')
plt.title('Polynomial Regression (Degree 2)')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()

#K-Nearest Neighbors (KNN) Regressor
from sklearn.neighbors import KNeighborsRegressor

# Data
X = np.array([[1000], [1500], [2000], [2500], [3000]])  # Area
y = np.array([200000, 250000, 300000, 350000, 400000])  # Price

# Model
model = KNeighborsRegressor(n_neighbors=2)
model.fit(X, y)

# Prediction
new_area = np.array([[2500]])
predicted_price = model.predict(new_area)
print(f"Predicted Price: ${predicted_price[0]:.2f}")

from sklearn.neighbors import KNeighborsRegressor

# Data
X = np.array([[1000], [1500], [2000], [2500], [3000]])
y = np.array([200000, 250000, 300000, 350000, 400000])

# Model
model = KNeighborsRegressor(n_neighbors=2)
model.fit(X, y)

# Predictions for smoother curve
X_range = np.linspace(1000, 3000, 100).reshape(-1, 1)
y_pred = model.predict(X_range)

# Plot
plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X_range, y_pred, color='green', label='KNN Prediction')
plt.title('K-Nearest Neighbors Regression')
plt.xlabel('Area')
plt.ylabel('Price')
plt.legend()
plt.show()


# using fillna to replace missing values

# Data
X = np.array([[1000], [1500], [2000], [2500], [3000]])  # Area
y = np.array([200000, 250000, 300000, 350000, 400000])  #

# Model
model = LinearRegression(True, 130)
model.fit(X, y)
model.predict(X)

plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.title('Linear Regression with Missing Values')
plt.xlabel('Area')
plt.ylabel('Price')
plt.legend()
plt.show()

